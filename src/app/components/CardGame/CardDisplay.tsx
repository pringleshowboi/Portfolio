// src/app/components/CardGame/CardDisplay.tsx
'use client';

import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber'; 
import * as THREE from 'three';
import { useRef } from 'react';

// --- Global Configuration ---
const CARD_MODELS = [
Â  Â  "KingOfClubs.glb", Â 
Â  Â  "QueenOfClubs.glb", 
Â  Â  "JackOfHearts.glb", 
Â  Â  "AceOfSpades.glb", 
Â  Â  "10OfHearts.glb", 
];

// Reverting to Top-Left Configuration for the Analysis (Rotating) state:
const ANALYZE_POSITION: [number, number, number] = [-0.5, 0.5, 0.5]; 
const ANALYZE_SCALE = 0.5; 

interface CardDisplayProps {
Â  Â  index: number;
Â  Â  position: [number, number, number];
Â  Â  isDisplayed?: boolean; // Warning: 'isDisplayed' is assigned a value but never used. 
Â  Â  isClicked?: boolean; // Warning: 'isClicked' is assigned a value but never used.
Â  Â  isAnalyzed: boolean; 
}

export default function CardDisplay({ index, position, isDisplayed = false, isClicked = false, isAnalyzed }: CardDisplayProps) {
Â  Â  const modelPath = CARD_MODELS[index];
Â  Â  const groupRef = useRef<THREE.Group>(null); 

Â  Â  // ðŸ›‘ FIX 1: useGLTF MUST BE CALLED UNCONDITIONALLY AT THE TOP
    // This resolves: Error: React Hook "useGLTF" is called conditionally.
    // The hook is called outside of the previous try/catch block.
Â  Â  let loadedData;
Â  Â  let scene: THREE.Group | null = null;
    
    // Temporarily disable the linter here to prevent issues with GLTF type inference
    // when accessing .scene outside a try/catch, if needed.
    // However, the cleanest fix is to just call the hook:
    const gltf = useGLTF(`/models/${modelPath}`);
    scene = gltf.scene;

Â  Â  // ðŸ›‘ FIX 2: useFrame MUST BE CALLED UNCONDITIONALLY AT THE TOP
Â  Â  useFrame((state, delta) => {
Â  Â  Â  Â  if (isAnalyzed && groupRef.current) {
Â  Â  Â  Â  Â  Â  // Rotate around the Y-axis when being analyzed
Â  Â  Â  Â  Â  Â  groupRef.current.rotation.y += delta * 0.5; 
Â  Â  Â  Â  }
Â  Â  });


Â  Â  // --- Early Return (NOW SAFE) ---
Â  Â  // If the model load failed, we return AFTER the hooks are called.
Â  Â  if (!scene) return null;


Â  Â  // --- Scaling and Positioning Logic ---
Â  Â  const handScale = 0.25; 

Â  Â  // 1. Determine the final scale (Analysis overrides all)
Â  Â  const finalScale = isAnalyzed 
Â  Â  Â  Â  ? ANALYZE_SCALE 
Â  Â  Â  Â  : handScale;

Â  Â  // 2. Determine the final position
Â  Â  const finalPosition = isAnalyzed 
Â  Â  Â  Â  ? ANALYZE_POSITION // Top-left corner
Â  Â  Â  Â  : position;
Â  Â  
Â  Â  // 3. Calculate Rotation
Â  Â  // Card faces forward (0) in analysis, faces away (Math.PI) in the hand
Â  Â  const BASE_ROTATION_Y = isAnalyzed ? 0 : Math.PI; 
Â  Â  
Â  Â  const initialRotation: [number, number, number] = [
Â  Â  Â  Â  0, 
Â  Â  Â  Â  BASE_ROTATION_Y, 
Â  Â  Â  Â  0
Â  Â  ]; Â  Â  Â  Â  Â 

Â  Â  return (
Â  Â  Â  Â  <group 
Â  Â  Â  Â  Â  Â  ref={groupRef}
Â  Â  Â  Â  Â  Â  position={finalPosition} 
Â  Â  Â  Â  Â  Â  scale={[finalScale, finalScale, finalScale]} 
Â  Â  Â  Â  Â  Â  rotation={initialRotation}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {/* renderOrder=1 ensures the analyzed card is always drawn on top */}
Â  Â  Â  Â  Â  Â  <primitive object={scene.clone()} renderOrder={isAnalyzed ? 1 : 0} /> 
Â  Â  Â  Â  </group>
Â  Â  );
}

// --- Preloading ---
CARD_MODELS.forEach(model => useGLTF.preload(`/models/${model}`));