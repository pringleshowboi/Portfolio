// components/CardGame/CardGame.tsx
'use client';

import { useState, useCallback, useLayoutEffect } from 'react';
import { Canvas, useThree, useStore } from '@react-three/fiber'; 
import { Environment } from '@react-three/drei'; 
import * as THREE from 'three';
import CardDisplay from './CardDisplay'; 
import Link from 'next/link'; 
// 1. IMPORT SYNOPSIS DATA
import { CARD_SYNOPSES } from './CardSynopses'; 

// --- Configuration ---
const CARD_COUNT = 5;
const ANALYSIS_DURATION_MS = 8000; // 10 seconds

const CARD_SYNOPSIS_TITLES = [
Â  Â  'ACHIEVEMENTS: KING OF CLUBS', 
Â  Â  'EDCUATION: QUEEN OF CLUBS', 
Â  Â  'PROJECTS: JACK OF HEARTS', 
Â  Â  'EXPERIENCE: ACE OF SPADES', 
Â  Â  'BLOGSITE: TEN OF HEARTS'
];

interface CardGameProps {
Â  Â  collectedCards: boolean[];
Â  Â  onCardCollect: (index: number) => void;
Â  Â  onExit: () => void;
}

// --- Hand Position/Rotation Setup for Fanned Effect ---
const BASE_HAND_Y = 0.01; 
const HAND_POSITIONS_X: number[] = [-1.5, -0.75, 0, 0.75, 1.5]; 
const CARD_ROTATIONS_Z: number[] = [0.15, 0.05, 0, -0.05, -0.15]; 

const HAND_POSITIONS: [number, number, number][] = HAND_POSITIONS_X.map(x => [x, BASE_HAND_Y, 0]);

// --- CANVAS INTERACTION HANDLER (R3F Context) ---
interface CanvasInteractionHandlerProps {
Â  Â  analyzedCardIndex: number | null;
}

function CanvasInteractionHandler({ analyzedCardIndex }: CanvasInteractionHandlerProps) {
Â  Â  const { invalidate } = useThree(); 
Â  Â  const store = useStore(); 
Â  Â  
Â  Â  const setFrameloop = useCallback((mode: 'always' | 'demand') => {
Â  Â  Â  Â  store.setState({ frameloop: mode });
Â  Â  }, [store]);

Â  Â  useLayoutEffect(() => {
Â  Â  Â  Â  invalidate(); 
Â  Â  }, [analyzedCardIndex, invalidate]); 
Â  Â  
Â  Â  useLayoutEffect(() => {
Â  Â  Â  Â  if (analyzedCardIndex !== null) {
Â  Â  Â  Â  Â  Â  setFrameloop('always');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  setFrameloop('demand');
Â  Â  Â  Â  }
Â  Â  }, [analyzedCardIndex, setFrameloop]);

Â  Â  return null; 
}


// --- STATIC CAMERA ---
function StaticCamera() {
Â  Â  const { camera, size, invalidate } = useThree(); 
Â  Â  
Â  Â  const fixedPosition: [number, number, number] = [0, 0, 5]; 
Â  Â  const fixedTarget: [number, number, number] = [0, 0, 0];
Â  Â  const frustumSize = 7; 
Â  Â  const fixedZoom = 1.8; 

Â  Â  // ðŸ›‘ R3F Hook Dependency Warning Fix: Ignore the rule for this specific use case
    // eslint-disable-next-line react-hooks/exhaustive-deps
Â  Â  const updateCamera = useCallback(() => {
Â  Â  Â  Â  camera.position.set(...fixedPosition);
Â  Â  Â  Â  camera.lookAt(...fixedTarget);
Â  Â  Â  Â  camera.zoom = fixedZoom; 
Â  Â  Â  Â  
Â  Â  Â  Â  if (camera instanceof THREE.OrthographicCamera) {
Â  Â  Â  Â  Â  Â  const aspect = size.width / size.height;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  camera.left = -frustumSize * aspect / 2;
Â  Â  Â  Â  Â  Â  camera.right = frustumSize * aspect / 2;
Â  Â  Â  Â  Â  Â  camera.top = frustumSize / 2;
Â  Â  Â  Â  Â  Â  camera.bottom = -frustumSize / 2;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  camera.updateProjectionMatrix();
Â  Â  Â  Â  invalidate(); 
Â  Â  Â  Â  
Â  Â  }, [camera, size.width, size.height, invalidate]);


Â  Â  useLayoutEffect(() => {
Â  Â  Â  Â  updateCamera();
Â  Â  }, [updateCamera]); 

Â  Â  return null; 
}


// --- Interactive Card Component ---
interface InteractiveCardProps {
Â  Â  index: number;
Â  Â  onCardClick: (index: number) => void;
Â  Â  position: [number, number, number];
Â  Â  cardRotationZ: number; 
}

function InteractiveCard({ index, onCardClick, position, cardRotationZ }: InteractiveCardProps) {
Â  Â  return (
Â  Â  Â  Â  <group 
Â  Â  Â  Â  Â  Â  onClick={() => onCardClick(index)}
Â  Â  Â  Â  Â  Â  rotation={[0, 0, cardRotationZ]} 
Â  Â  Â  Â  Â  Â  // Ensures cursor changes on hover and prevents event bleed-through
Â  Â  Â  Â  Â  Â  onPointerOver={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  e.stopPropagation(); 
Â  Â  Â  Â  Â  Â  Â  Â  document.body.style.cursor = 'pointer';
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  onPointerOut={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  Â  Â  Â  Â  document.body.style.cursor = 'default';
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <CardDisplay 
Â  Â  Â  Â  Â  Â  Â  Â  index={index} 
Â  Â  Â  Â  Â  Â  Â  Â  position={position} 
Â  Â  Â  Â  Â  Â  Â  Â  isDisplayed={false} 
Â  Â  Â  Â  Â  Â  Â  Â  isClicked={false}
Â  Â  Â  Â  Â  Â  Â  Â  isAnalyzed={false}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </group>
Â  Â  );
}


export default function CardGame({ collectedCards, onCardCollect, onExit }: CardGameProps) {
Â  Â  // Initial message reflects CV is ready, but cards are for detail
Â  Â  const [message, setMessage] = useState("CV ACCESS GRANTED. SELECT A CARD for project data analysis.");
Â  Â  const [analyzedCardIndex, setAnalyzedCardIndex] = useState<number | null>(null); 
Â  Â  const [isAnalysisComplete, setIsAnalysisComplete] = useState(false);
Â  Â  
Â  Â  // CV is always enabled now
Â  Â  const allCardsCollected = true; 
Â  Â  const isInteractionBlocked = analyzedCardIndex !== null;
Â  Â  
Â  Â  // Set message color based on state
Â  Â  const messageColor = analyzedCardIndex !== null ? 'text-red-400' : (collectedCards.some(Boolean) ? 'text-green-400' : 'text-yellow-400');


Â  Â  const handleCardClick = useCallback((index: number) => {
Â  Â  Â  Â  if (isInteractionBlocked || collectedCards[index]) return; 

Â  Â  Â  Â  // 1. Begin Analysis Sequence
Â  Â  Â  Â  setAnalyzedCardIndex(index);
Â  Â  Â  Â  setMessage(`ANALYZING: ${CARD_SYNOPSIS_TITLES[index]}... 5-second data retrieval commencing.`);
Â  Â  Â  Â  
Â  Â  Â  Â  // 2. Set Timeout to stop analysis and collect the card
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  setAnalyzedCardIndex(null); 
Â  Â  Â  Â  Â  Â  onCardCollect(index); // Still mark the card as collected 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  setIsAnalysisComplete(true);
Â  Â  Â  Â  Â  Â  Â  Â  // Status message after collection
Â  Â  Â  Â  Â  Â  Â  Â  setMessage(`ANALYSIS COMPLETE: Data fragment retrieved for ${CARD_SYNOPSIS_TITLES[index]}. SELECT ANOTHER CARD or use the download link.`);
Â  Â  Â  Â  Â  Â  Â  Â  setTimeout(() => setIsAnalysisComplete(false), 1000); 
Â  Â  Â  Â  }, ANALYSIS_DURATION_MS); 

Â  Â  }, [onCardCollect, isInteractionBlocked, collectedCards]);


Â  Â  return (
Â  Â  Â  Â  <> 
Â  Â  Â  Â  Â  Â  <div className="flex flex-col h-full w-full p-2 bg-black">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-2 pb-2 border-b border-green-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl text-yellow-400 font-bold">DATA RETRIEVAL: cards.exe</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex space-x-2"> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* CV Download Button (ALWAYS ACTIVE, disabled only during analysis) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  href="/cv/Owen-Van-Wyk-Resume.pdf" // ðŸ‘ˆ UPDATE THIS PATH
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  download 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-3 py-1 text-sm transition-colors font-bold ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  !isInteractionBlocked
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'text-white bg-green-600 hover:bg-green-400 border border-green-600'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'text-gray-600 bg-gray-900 border border-gray-600 cursor-not-allowed'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  aria-disabled={isInteractionBlocked}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (isInteractionBlocked) e.preventDefault();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [ðŸ’¾] DOWNLOAD CV
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Exit to Terminal Button (Always Visible, Conditionally Disabled) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={onExit} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isInteractionBlocked}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-3 py-1 text-sm transition-colors font-mono ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isInteractionBlocked 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'text-gray-600 border border-gray-600 cursor-not-allowed' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'text-red-400 hover:text-red-200 border border-red-400'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [X] EXIT TO TERMINAL
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="h-[calc(100%-6rem)] border border-green-700 bg-gray-900 relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Canvas 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  frameloop="demand" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  orthographic 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ›‘ FIX: Explicitly include all required RaycasterParameters */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  raycaster={{ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  params: { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Mesh: { material: true },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Line: {},
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  LOD: {},
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Points: {},
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Sprite: {},
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <StaticCamera />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CanvasInteractionHandler analyzedCardIndex={analyzedCardIndex} /> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ambientLight intensity={0.5} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <directionalLight position={[10, 10, 5]} intensity={1} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Environment preset="night" />

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* RENDER ANALYZED CARD (Top-Left, Rotating) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {analyzedCardIndex !== null && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardDisplay 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={`analyze-${analyzedCardIndex}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  index={analyzedCardIndex} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  position={[0, 0, 0]} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isDisplayed={false} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isAnalyzed={true}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Renders ONLY UNCOLLECTED cards in the hand */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {collectedCards.map((isCollected, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  !isCollected && analyzedCardIndex !== index && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <InteractiveCard
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  index={index}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onCardClick={handleCardClick} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  position={HAND_POSITIONS[index]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cardRotationZ={CARD_ROTATIONS_Z[index]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Canvas>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Analysis Synopsis (Top-Left) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {analyzedCardIndex !== null && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute top-5 left-5 p-4 border border-red-500 bg-black/70 text-sm w-[600px] text-left"> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-red-400 font-bold mb-2">NETWORK ANALYSIS IN PROGRESS...</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* DISPLAY SYNOPSIS: uses CARD_SYNOPSES data */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-white font-bold mb-1">{CARD_SYNOPSIS_TITLES[analyzedCardIndex]}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-white whitespace-pre-wrap">{CARD_SYNOPSES[analyzedCardIndex]}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Collection Complete Message */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isAnalysisComplete && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div className='absolute inset-0 flex justify-center items-center text-2xl text-green-400 bg-black/70'>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â FRAGMENT RETRIEVED.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* Status Area */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className={`mt-2 text-sm font-mono ${messageColor}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {message}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  );
}