// app/page.tsx
'use client';

// Import all necessary components and hooks
import SystemStartup from "./components/SystemStartup/SystemStartup";
import BackgroundAudio from "./components/BackgroundAudio/BackgroundAudio"
import { useState, useRef, useCallback, useEffect } from "react"; 
import CardGame from "./components/CardGame/CardGame"; 
import { useRouter } from 'next/navigation'; 

// --- Configuration for Audio Fade-in ---
const TARGET_VOLUME = 0.4; Â  Â  Â // Final volume (40%)
const FADE_DURATION = 1500; Â  Â  // Fade over 1.5 seconds (1500ms)
const REDIRECT_DELAY_MS = 1500; // Delay after game completion before redirecting
// ----------------------------------------

// COMPLETE STATE TYPE
type AppState = 'idle' | 'zooming' | 'booting' | 'os_load' | 'terminal' | 'game' | 'game_complete';
// CARD CONFIG
const CARD_COUNT = 5;

const Home = () => {
Â  Â  const router = useRouter(); 
Â  Â  const [appState, setAppState] = useState<AppState>('idle');
Â  Â  const audioRef = useRef<HTMLAudioElement | null>(null);
Â  Â  const [collectedCards, setCollectedCards] = useState<boolean[]>(Array(CARD_COUNT).fill(false));


Â  Â  // Function to handle the smooth fade-in of the background audio
Â  Â  const startAudioFade = () => {
Â  Â  Â  Â  const audio = audioRef.current;
Â  Â  Â  Â  if (audio) {
Â  Â  Â  Â  Â  Â  audio.play().catch(error => { console.error("Audio failed to play:", error); });
Â  Â  Â  Â  Â  Â  let volume = 0;
Â  Â  Â  Â  Â  Â  const interval = 50;
Â  Â  Â  Â  Â  Â  const steps = FADE_DURATION / interval;
Â  Â  Â  Â  Â  Â  const volumeStep = TARGET_VOLUME / steps;
Â  Â  Â  Â  Â  Â  const fadeInterval = setInterval(() => {
Â  Â  Â  Â  Â  Â  Â  Â  volume += volumeStep;
Â  Â  Â  Â  Â  Â  Â  Â  if (audio) audio.volume = Math.min(volume, TARGET_VOLUME);
Â  Â  Â  Â  Â  Â  Â  Â  if (volume >= TARGET_VOLUME) clearInterval(fadeInterval);
Â  Â  Â  Â  Â  Â  }, interval);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // 1. HANDLER: Triggered when the 3D monitor mesh is clicked (idle -> zooming)
Â  Â  const handleScreenClick = () => {
Â  Â  Â  Â  if (appState === 'idle') {
Â  Â  Â  Â  Â  Â  startAudioFade();
Â  Â  Â  Â  Â  Â  setAppState('zooming');
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // 2. HANDLER: Triggered when CameraZoom animation finishes (zooming -> booting)
Â  Â  const handleZoomComplete = () => {
Â  Â  Â  Â  if (appState === 'zooming') {
Â  Â  Â  Â  Â  Â  setAppState('booting');
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // 3. HANDLER: Triggered twice by TerminalScreen (booting -> os_load -> terminal)
Â  Â  const handleOsLoadComplete = () => {
Â  Â  Â  Â  if (appState === 'booting') {
Â  Â  Â  Â  Â  Â  setAppState('os_load');
Â  Â  Â  Â  } else if (appState === 'os_load') {
Â  Â  Â  Â  Â  Â  setAppState('terminal');
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  // 4. HANDLER: Triggered when the user clicks 'cards.exe' OR 'blog.exe'
Â  Â  // ðŸ›‘ FIX APPLIED HERE ðŸ›‘
Â  Â  const handleTerminalExecute = (command: 'cards.exe' | 'blog.exe') => {
        if (command === 'cards.exe') {
            setAppState('game'); // Launch the card game
        } else if (command === 'blog.exe') {
            // Immediately redirect to the blog page when 'blog.exe' is clicked
            router.push('/blog'); 
        }
Â  Â  };
Â  Â  
Â  Â  // 5. HANDLER: Exit the game back to the terminal
Â  Â  const handleExitGame = () => {
Â  Â  Â  Â  setAppState('terminal');
Â  Â  };

Â  Â  // 6. HANDLER: Card Collection Logic
Â  Â  const handleCardCollect = useCallback((index: number) => {
Â  Â  Â  Â  setCollectedCards(prev => {
Â  Â  Â  Â  Â  Â  const newCards = [...prev];
Â  Â  Â  Â  Â  Â  newCards[index] = true;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // CHECK FOR GAME COMPLETION HERE 
Â  Â  Â  Â  Â  Â  const allCollected = newCards.every(isCollected => isCollected);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if (allCollected) {
Â  Â  Â  Â  Â  Â  Â  Â  // If all cards are collected, transition to the completion state
Â  Â  Â  Â  Â  Â  Â  Â  setAppState('game_complete');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  return newCards;
Â  Â  Â  Â  });
Â  Â  }, []);

Â  Â  // NEW EFFECT: Redirection Logic for Game Completion
Â  Â  useEffect(() => {
Â  Â  Â  Â  let timeout: NodeJS.Timeout;
Â  Â  Â  Â  
Â  Â  Â  Â  if (appState === 'game_complete') {
Â  Â  Â  Â  Â  Â  // Wait a moment for any final game state or message to display
Â  Â  Â  Â  Â  Â  timeout = setTimeout(() => {
Â  Â  Â  Â  Â  Â  Â  Â  // Use the router to navigate to the blog page
Â  Â  Â  Â  Â  Â  Â  Â  router.push('/blog'); 
Â  Â  Â  Â  Â  Â  }, REDIRECT_DELAY_MS);
Â  Â  Â  Â  }

Â  Â  Â  Â  return () => clearTimeout(timeout);
Â  Â  }, [appState, router]);


Â  Â  // --- CONDITIONAL RENDERING ---

Â  Â  return (
Â  Â  Â  Â  <div className="h-screen w-screen overflow-hidden">
Â  Â  Â  Â  Â  Â  <BackgroundAudio audioRef={audioRef} />

Â  Â  Â  Â  Â  Â  {/* RENDER CINEMATIC INTRO / TERMINAL (All non-game states) */}
Â  Â  Â  Â  Â  Â  {(appState !== 'game' && appState !== 'game_complete') && ( 
Â  Â  Â  Â  Â  Â  Â  Â  <SystemStartup 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  appState={appState} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onScreenClick={handleScreenClick}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onOsLoadComplete={handleOsLoadComplete} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onTerminalExecute={handleTerminalExecute}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onZoomComplete={handleZoomComplete} 
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {/* RENDER MAIN GAME SCENE */}
Â  Â  Â  Â  Â  Â  {appState === 'game' && (
Â  Â  Â  Â  Â  Â  Â  Â  <CardGame
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  collectedCards={collectedCards}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onCardCollect={handleCardCollect}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onExit={handleExitGame}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* GAME COMPLETE MESSAGE (Briefly Shown before Redirect) */}
Â  Â  Â  Â  Â  Â  {appState === 'game_complete' && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute inset-0 z-50 flex flex-col justify-center items-center bg-black/90 font-mono text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-4xl font-bold text-green-400 animate-pulse mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  DATA RETRIEVAL COMPLETE.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xl text-yellow-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Redirecting to //BLOGSITE.EXE...
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* Overlay Text for Idle State */}
Â  Â  Â  Â  Â  Â  {appState === 'idle' && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute inset-0 z-20 flex justify-center items-center pointer-events-none">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xl md:text-2xl font-mono text-white animate-pulse">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  CLICK COMPUTER MONITOR TO INITIATE
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  )
}

export default Home;